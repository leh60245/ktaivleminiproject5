version: '3.8'

services:
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      CLUSTER_ID: "kraft-cluster-01"
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: "1"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices

  subscription-management:
    build: ./SubscriptionManagement
    container_name: subscription-management
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices

  author-management:
    build: ./AuthorManagement
    container_name: author-management
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices

  library-management:
    build: ./librarymanagement
    container_name: library-management
    ports:
      - "8084:8084"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices

  point-management:
    build: ./pointmanagement
    container_name: point-management
    ports:
      - "8085:8085"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices

  manuscript-publication:
    build: ./ManuscriptPublication
    container_name: manuscript-publication
    ports:
      - "8086:8086"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-test-dummy-key-for-development-testing-only}
    networks:
      - microservices

  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "8088:8080"
    depends_on:
      - subscription-management
      - author-management
      - library-management
      - point-management
      - manuscript-publication
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices

volumes:
  kafka-data:

networks:
  microservices:
    driver: bridge
